
services:
  service1:
    build:
      context: ./service1
      dockerfile: Dockerfile
    container_name: service1
    ports:
      - "3001:3001"
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - KAFKA_BROKER=kafka:29092
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=5000
    env_file:
      - ./service1/.env.production
    volumes:
      - ./service1:/app
      - /app/node_modules
    networks:
      - kafka-network
    depends_on:
      - kafka
    restart: unless-stopped

  service2:
    build:
      context: ./service2
      dockerfile: Dockerfile
    container_name: service2
    ports:
      - "3000:3000"
      - "5001:5001"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - KAFKA_BROKER=kafka:29092
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=5001
    env_file:
      - ./service2/.env.production
    volumes:
      - ./service2:/app
      - /app/node_modules
    networks:
      - kafka-network
    depends_on:
      - kafka
    restart: unless-stopped


  logger-service:
    build:
      context: ./logger-service 
      dockerfile: Dockerfile
    container_name: logger-service
    ports:
      - "2900:2900"
    environment:
      - NODE_ENV=production
      - PORT=2900
      - KAFKA_BROKER=kafka:29092
    env_file:
      - ./logger-service/.env.production
    volumes:
      - ./logger-service:/app
      - /app/node_modules
    networks:
      - kafka-network
    depends_on:
      - kafka
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - kafka-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - kafka-network

  kong-database:
    image: postgres:13-alpine
    container_name: kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kongpass
    ports:
      - "5433:5432"
    volumes:
      - kong-database:/var/lib/postgresql/data
    networks:
      - kafka-network

  kong-migration:
    image: kong:3.4
    container_name: kong-migration
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PG_DATABASE: kong
    depends_on:
      - kong-database
    networks:
      - kafka-network

  kong:
    image: kong:3.4
    container_name: kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_SSL: off
      KONG_ANONYMOUS_REPORTS: off
    depends_on:
      - kong-migration
      - service1
      - service2
    ports:
      - "8000:8000" # Proxy
      - "8001:8001" # Admin API
      - "8443:8443" # Proxy SSL
      - "8444:8444" # Admin SSL
    networks:
      - kafka-network

  kong-manager:
    image: kong:3.4
    container_name: kong-manager
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_SSL: off
      KONG_ANONYMOUS_REPORTS: off
      KONG_ADMIN_GUI: on
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
    depends_on:
      - kong-migration
    ports:
      - "8002:8002" 
    networks:
      - kafka-network

volumes:
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
  kafka-data:
    driver: local
  kong-database:
    driver: local

networks:
  kafka-network:
    driver: bridge
